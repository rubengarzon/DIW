body{
}

main{
	background-color: #C5CAE9;
	min-height: 1000px;
	display: grid;
	/*Dividir el grid en un numero determinado de filas y columnas. Puedo usar muchas unidades. %,px, auto, repeat;
	grid-template-rows: 100px 10% auto 15%;
	grid-template-columns: 10% repeat(2, 33%) auto*/
	grid-template-rows: 100px auto 10%;
	grid-template-columns: 30vw repeat(3, auto) 500px;
	
	/*grid-gap: gap filas y columnas;
	grid-row-gap y grip-column-gap para indicar gap individuales*/
	grid-gap: 10px 10px;
	*grid-row-gap:20%;


	/*Unidades FR => se reparten el espacio disponible 
	grid-template-rows: 100px 10% 1fr 15%;
	grid-template-columns: 1fr 1fr 1fr;*/
	*grid-template-rows: 100px 200px;
	grid-template-columns: 2fr repeat(2, 1fr) 2fr;

	/*grid-auto-rows y grid-auto-columns => Te permite indicar que tamaño tengan los grid items que no esten definidos en grid-template
	grid-template-rows: 100px 200px;
	grid-template-columns: 1fr 1fr 1fr; Tenfo tres filas
	grid-auto: 1fr; Si aparecen mas filas tendran el tamaño que yo indique aquí.*/
	*grid-auto-rows: 1fr;



	/*Nombrar los tracks. Automaticamente los tracks se numeran solos, pero podemos darle nombre 
	grid-template-columns: [col_first] 100px [col2] auto [col_end] 10%;
	grid-template-rows: [fila-start] 100px [row1-end row2-start] 200px [row-end] 150px;*/
	*grid-template-columns: [col_first] 100px [col2] auto [col_end] 10%;
	*grid-template-rows: [fila-start] 100px [row1-end row2-start] 200px [row-end] 150px;

	
	*grid-template-rows: 100px 200px 100px 200px;
	*grid-template-columns: 30vw repeat(2, 10%) 500px;
	/*justificacion de los items justify-items: start | end | center | stretch;*/
	*justify-items: center;


	/*alineación de los items align-items: start | end | center | stretch;*/
	*align-items: center;

	/*justificacion del contenido (Todo el grid  justify-content: start | end | center | stretch | space-around | space-between | space-evenly;*/
	*justify-content: end;

	/*alineación del contenido (Todo el grid  align-content: start | end | center | stretch | space-around | space-between | space-evenly;*/
	*align-content: end;


	/*minmax() => indica un valor maximo y minimo que queramos que tenta una fila o columna en el grid
	grid-template-columns: minmax(200px, 400px) 1fr
	grid-template-rows: minmax(200px, 400px) 1fr;
	*/
	grid-template-columns: minmax(200px, 400px) 1fr;
	grid-template-columns: 300px minmax(200px, 50%) 500px;
	*grid-template-columns: repeat(2, 10%) minmax(200px, 400px) repeat(3, 1fr);
	grid-template-columns: repeat(2, minmax(100px, 200px))  repeat(2, minmax(100px, 1fr));



	/*auto-fill y auto-fit auto rellena los item del grid. Se suele usar con repeat
	auto-fill =>  rellena dejando un espacio al final, es decir, dejará un espacio en la derecha
	auto-fit =>  rellena los grid para que ocupen todo el ancho de la página */

	*grid-template-columns: repeat(auto-fill,200px);
	*grid-template-columns: repeat(auto-fit,200px);
	*grid-template-columns: repeat(auto-fill,minmax(20px, 1fr));
	*grid-template-columns: repeat(auto-fit,minmax(20px, 1fr));

	
	/* Un ejemplo de la potenca de auto-fit si hacemos un buen uso. con estas
	4 lineas(las 3 de abajo y display:grid) tenemos un layout que sea auto distribuye sin necesidad de responsive*/
	grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
	grid-column-gap: 1rem;
	grid-row-gap: 2rem;



	/*grid-auto-rows => establece un valor por defecto para las filas que no han sido definidas
	grid-auto-columns => establece un valor por defecto para las columnas que no han sido definidas*/

	*grid-auto-rows: 10vh;



	/* grid-auto-flow => Como quieres que se conporte el flujo de cajas hijas de grid, en fila o en columna (Se suele usar con order)
	Flujo de columna: 
		en el grid => grid-auto-flow: column;
		en los hijos grid => order:1;

	Flujo de fila: 
		en el grid => grid-auto-flow: row;
		en los hijos grid => order:1;
	*/

	*grid-auto-flow: row;













	/*Creacion de areas
	grid-template-rows:  [row1-start] "header header header" 25px [row1-end]
	grid-template-columns: 1fr 1fr 1fr;*/



}
	article:nth-child(4){
		order: 1;
		*grid-area: 1 / 1 / 3 / 3;
	}
	


.item1,.item2,.item3{
	*grid-area: header;
}

article{
	font-size: 3rem;
}

article:nth-child(2n){
	background-color: #303F9F;
}

article:nth-child(2n+1){
	background-color: #5C6BC0;
}
